{"ast":null,"code":"var _jsxFileName = \"/Users/bmeek/Documents/github/bmeek0110/project3/frontend/src/components/Prediction.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchEvents } from '../services/eventService';\nimport { submitPrediction } from '../services/predictionService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Prediction = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [predictions, setPredictions] = useState({});\n  useEffect(() => {\n    const loadEvents = async () => {\n      const events = await fetchEvents();\n      setEvents(events);\n    };\n    loadEvents();\n  }, []);\n  const handleChange = (eventId, matchIndex, outcome) => {\n    setPredictions(prev => ({\n      ...prev,\n      [eventId]: {\n        ...prev[eventId],\n        [matchIndex]: outcome\n      }\n    }));\n  };\n  const handleSubmit = async eventId => {\n    await submitPrediction(eventId, predictions[eventId]);\n    // Optionally update UI or show success message\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: events.map(event => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: event.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), event.matches.map((match, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [match.wrestler1, \" vs \", match.wrestler2]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          onChange: e => handleChange(event._id, index, e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"Select Winner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: match.wrestler1,\n            children: match.wrestler1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: match.wrestler2,\n            children: match.wrestler2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleSubmit(event._id),\n        children: \"Submit Predictions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)]\n    }, event._id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(Prediction, \"Dp8B4VoqE0pLnwccGlJhyftw8cs=\");\n_c = Prediction;\nexport default Prediction;\nvar _c;\n$RefreshReg$(_c, \"Prediction\");","map":{"version":3,"names":["React","useState","useEffect","fetchEvents","submitPrediction","jsxDEV","_jsxDEV","Prediction","_s","events","setEvents","predictions","setPredictions","loadEvents","handleChange","eventId","matchIndex","outcome","prev","handleSubmit","children","map","event","title","fileName","_jsxFileName","lineNumber","columnNumber","matches","match","index","wrestler1","wrestler2","onChange","e","_id","target","value","onClick","_c","$RefreshReg$"],"sources":["/Users/bmeek/Documents/github/bmeek0110/project3/frontend/src/components/Prediction.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchEvents } from '../services/eventService';\nimport { submitPrediction } from '../services/predictionService';\n\nconst Prediction = () => {\n  const [events, setEvents] = useState([]);\n  const [predictions, setPredictions] = useState({});\n\n  useEffect(() => {\n    const loadEvents = async () => {\n      const events = await fetchEvents();\n      setEvents(events);\n    };\n    loadEvents();\n  }, []);\n\n  const handleChange = (eventId, matchIndex, outcome) => {\n    setPredictions((prev) => ({\n      ...prev,\n      [eventId]: { ...prev[eventId], [matchIndex]: outcome },\n    }));\n  };\n\n  const handleSubmit = async (eventId) => {\n    await submitPrediction(eventId, predictions[eventId]);\n    // Optionally update UI or show success message\n  };\n\n  return (\n    <div>\n      {events.map((event) => (\n        <div key={event._id}>\n          <h2>{event.title}</h2>\n          {event.matches.map((match, index) => (\n            <div key={index}>\n              <span>{match.wrestler1} vs {match.wrestler2}</span>\n              <select onChange={(e) => handleChange(event._id, index, e.target.value)}>\n                <option value=\"\">Select Winner</option>\n                <option value={match.wrestler1}>{match.wrestler1}</option>\n                <option value={match.wrestler2}>{match.wrestler2}</option>\n              </select>\n            </div>\n          ))}\n          <button onClick={() => handleSubmit(event._id)}>Submit Predictions</button>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Prediction;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,gBAAgB,QAAQ,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjE,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC,CAAC;EAElDC,SAAS,CAAC,MAAM;IACd,MAAMW,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,MAAMJ,MAAM,GAAG,MAAMN,WAAW,CAAC,CAAC;MAClCO,SAAS,CAACD,MAAM,CAAC;IACnB,CAAC;IACDI,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,YAAY,GAAGA,CAACC,OAAO,EAAEC,UAAU,EAAEC,OAAO,KAAK;IACrDL,cAAc,CAAEM,IAAI,KAAM;MACxB,GAAGA,IAAI;MACP,CAACH,OAAO,GAAG;QAAE,GAAGG,IAAI,CAACH,OAAO,CAAC;QAAE,CAACC,UAAU,GAAGC;MAAQ;IACvD,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAME,YAAY,GAAG,MAAOJ,OAAO,IAAK;IACtC,MAAMX,gBAAgB,CAACW,OAAO,EAAEJ,WAAW,CAACI,OAAO,CAAC,CAAC;IACrD;EACF,CAAC;EAED,oBACET,OAAA;IAAAc,QAAA,EACGX,MAAM,CAACY,GAAG,CAAEC,KAAK,iBAChBhB,OAAA;MAAAc,QAAA,gBACEd,OAAA;QAAAc,QAAA,EAAKE,KAAK,CAACC;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EACrBL,KAAK,CAACM,OAAO,CAACP,GAAG,CAAC,CAACQ,KAAK,EAAEC,KAAK,kBAC9BxB,OAAA;QAAAc,QAAA,gBACEd,OAAA;UAAAc,QAAA,GAAOS,KAAK,CAACE,SAAS,EAAC,MAAI,EAACF,KAAK,CAACG,SAAS;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACnDrB,OAAA;UAAQ2B,QAAQ,EAAGC,CAAC,IAAKpB,YAAY,CAACQ,KAAK,CAACa,GAAG,EAAEL,KAAK,EAAEI,CAAC,CAACE,MAAM,CAACC,KAAK,CAAE;UAAAjB,QAAA,gBACtEd,OAAA;YAAQ+B,KAAK,EAAC,EAAE;YAAAjB,QAAA,EAAC;UAAa;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACvCrB,OAAA;YAAQ+B,KAAK,EAAER,KAAK,CAACE,SAAU;YAAAX,QAAA,EAAES,KAAK,CAACE;UAAS;YAAAP,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC,eAC1DrB,OAAA;YAAQ+B,KAAK,EAAER,KAAK,CAACG,SAAU;YAAAZ,QAAA,EAAES,KAAK,CAACG;UAAS;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAS,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpD,CAAC;MAAA,GANDG,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOV,CACN,CAAC,eACFrB,OAAA;QAAQgC,OAAO,EAAEA,CAAA,KAAMnB,YAAY,CAACG,KAAK,CAACa,GAAG,CAAE;QAAAf,QAAA,EAAC;MAAkB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA,GAZnEL,KAAK,CAACa,GAAG;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAad,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACnB,EAAA,CA5CID,UAAU;AAAAgC,EAAA,GAAVhC,UAAU;AA8ChB,eAAeA,UAAU;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}